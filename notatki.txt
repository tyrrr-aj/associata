Sposób uruchomienia całości:
- albo wywołanie Erlanga z pythona (najpewniej przez command line)
- albo osobny .bat odpalający całość


Wizualizacja nie obsługuje ujemnych pobudzeń (hamowań).


do zrobienia:
- moduł w Javie wykonujący przygotowanie wizualne grafu w Gephi (layout, kolory, wielkości, etykiety) - dla AGDS, potem łatwo będzie dodać dla innych struktur
- zintegrować w całość:
    - do rozważenia: olać Pythona i networkx, przenieść całość do Javy
    - uruchamiać cały eksport .gexf/.gephi jako podproces Reportera, z commandline'a (możliwe do wyłączenia razem z całym reporterem), z kolejką RabbitMQ tworzoną ad hoc (albo i z prostszą komunikacją)
- implementacja as-neuronu w Erlangu w ramach biblioteki
- (potencjalnie poszczególne struktury asocjacyjne w Erlangu wraz z modułami Java przygotowującymi wizualizację w Gephi)


Naukowo ;) :
- koncepcja badań pomniejszych
- kontekst (przegląd literatury, state-of-the-art)




SarsaAGDS:
- use excitation of best sa as alpha parameter (dynamic step size equal to/proportional to strength of association)
- use value(best_sa) to form dynamic greedy_epsilon (tend to explore more if known actions are unsatisfactory, possibly decay over time (to avoid precise manual tuning))

PROBLEM:
W obecnym algorytmie za każdym razem pobudzamy wszystkie VNy odpowiadające za wartość akcji, z więc zawsze pobudzamy też wszystkie ON - czyli zawsze przeglądamy wszystkie wspomnienia.
Może lepiej byłoby, gdyby Vny odpowiadające za wartość akcji odpowiadały na każdą stymulację ze wzmocnieniem proporcjonalnym do przechowywanej wartości?
Wymaga to zadbania o odpowiednią głębokość inferencji, ale pozwoli korzystać z właściwości AGDS (bezpośredni dostęp do konkretnych wspomnień bez przeszukiwania całości). ZROBIONE


Punkt cięcia:
poprawka w avbtree:add, dodanie informacji zwrotnej czy wartość była już w drzewie, obsłużyć w vng (i opcjonalnie testach)



Optymistyczna inicjalizacja:
Od początku utworzyć VN odpowiadające możliwym akcjom i przy wyborze akcji stymulować je do określonego poziomu/ignorować stymulację słabszą niż określony poziom.




do_zrobienia_tmp:
recursive_stimulation_finished:
    - zombie stimulation_finished passing
    - agds:wait_for_stimulation_to_finish
    - agds:stimulate_vng, agds:stimulate_ong (change from single ON/VN to all-at-once)




RabbitMQ performance:
=============== Step 25330 ===============
[14365s] Picked action: [0]

Pyrlang performance:
=============== Step 19999 ===============
[8813s] Picked action: [1]


Benchmarking...
Data size: 100000
RabbitMQ time: 69.37s
Pyrlang time: 2.12s     <------------- The winner!
ZeroMQ time: 26.83s



1000    7s
2000    22s
4000    73s
8000    220s
16000   670s
32000   2100s
64000   6300s
128000  20000s